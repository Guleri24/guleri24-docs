I"*<p>Date: 14 Oct 2021</p>

<p>A place dedicated to questions related to Autoboxing ;-)</p>

<p>Q. How does autoboxing handle the following code fragment?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Integer a = null;
int b = a;
</code></pre></div></div>

<p>A. It results in a run-time error. Primitive type can store 
every value of their corresponding wrapper type except <code class="language-plaintext highlighter-rouge">null</code>.</p>

<p>Q Why does the first group of statements print <code class="language-plaintext highlighter-rouge">true</code> , but 
the second <code class="language-plaintext highlighter-rouge">false</code>?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Integer a1 = 100;
Integer a2 = 100;
System.out.println(a1 == a2);   // true

Integer b1 = new Integer(100);
Integer b2 = new Integer(100);
System.out.println(b1 == b2);   // false

Integer c1 = 150;
Integer c2 = 150;
System.out.println(c1 == c2);   // false
</code></pre></div></div>

<p>A. The second prints <code class="language-plaintext highlighter-rouge">false</code> because <code class="language-plaintext highlighter-rouge">b1</code> and <code class="language-plaintext highlighter-rouge">b2</code> are references
to different Integer objects. The first and third code fragments
rely on autoboxing. Surprisingly the first prints true because
vlaues between <code class="language-plaintext highlighter-rouge">-128</code> and <code class="language-plaintext highlighter-rouge">127</code> apper to refer to the same immutable
Integer objects (Javaâ€™s implementation of valueOf() retrives a cached
values if the integer is between -128 and 127), while Java constructs 
new objects for each integer outside this range.</p>
:ET